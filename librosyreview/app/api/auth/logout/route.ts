import { NextRequest, NextResponse } from 'next/server';

/**
 * POST /api/auth/logout
 * Endpoint para cerrar sesi√≥n del usuario
 * 
 * Nota: En un sistema JWT stateless, el logout se maneja principalmente
 * en el cliente eliminando el token. Este endpoint puede usarse para
 * logging o invalidaci√≥n de tokens en implementaciones futuras.
 * 
 * @param request - Request con token en headers (opcional)
 * @returns Confirmaci√≥n de logout exitoso
 */
export async function POST(request: NextRequest) {
  try {
    // Obtener token del header Authorization (opcional)
    const authHeader = request.headers.get('authorization');
    const token = authHeader?.startsWith('Bearer ') ? authHeader.slice(7) : null;
    
    // Log del logout para auditor√≠a (opcional)
    if (token) {
      console.log('üîì Usuario cerr√≥ sesi√≥n:', new Date().toISOString());
      // Aqu√≠ podr√≠as agregar l√≥gica para invalidar el token en una blacklist
      // o registrar el evento en una tabla de auditor√≠a
    }
    
    // Respuesta exitosa
    return NextResponse.json(
      {
        success: true,
        message: 'Sesi√≥n cerrada exitosamente'
      },
      { status: 200 }
    );
    
  } catch (error) {
    console.error('‚ùå Error en logout:', error);
    
    // Error gen√©rico del servidor
    return NextResponse.json(
      {
        success: false,
        message: 'Error interno del servidor',
        error: 'INTERNAL_SERVER_ERROR'
      },
      { status: 500 }
    );
  }
}

/**
 * Manejo de m√©todos HTTP no permitidos
 */
export async function GET() {
  return NextResponse.json(
    {
      success: false,
      message: 'M√©todo no permitido. Use POST para cerrar sesi√≥n.'
    },
    { status: 405 }
  );
}