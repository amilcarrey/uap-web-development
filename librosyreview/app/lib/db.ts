import mongoose from 'mongoose';

/**
 * Configuraci√≥n de conexi√≥n a MongoDB Atlas
 * Maneja la conexi√≥n singleton para evitar m√∫ltiples conexiones
 */

// Variable global para mantener la conexi√≥n en desarrollo
declare global {
  var mongoose: any;
}

// URI de conexi√≥n desde variables de entorno
const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  throw new Error(
    'Por favor define la variable de entorno MONGODB_URI en .env.local'
  );
}

/**
 * Configuraci√≥n de opciones de conexi√≥n a MongoDB
 * Optimizada para producci√≥n y desarrollo
 */
const connectionOptions = {
  bufferCommands: false, // Deshabilita el buffering de comandos
  maxPoolSize: 10, // M√°ximo n√∫mero de conexiones en el pool
  serverSelectionTimeoutMS: 5000, // Timeout para selecci√≥n de servidor
  socketTimeoutMS: 45000, // Timeout para operaciones de socket
  family: 4, // Usar IPv4
};

/**
 * Funci√≥n para conectar a MongoDB Atlas
 * Implementa patr√≥n singleton para reutilizar conexiones
 * @returns Promise<typeof mongoose> - Instancia de mongoose conectada
 */
export async function connectToDatabase(): Promise<typeof mongoose> {
  try {
    // En desarrollo, usar variable global para mantener la conexi√≥n
    if (process.env.NODE_ENV === 'development') {
      if (!global.mongoose) {
        console.log('üîÑ Conectando a MongoDB Atlas...');
        global.mongoose = await mongoose.connect(MONGODB_URI!, connectionOptions);
        console.log('‚úÖ Conexi√≥n a MongoDB Atlas establecida');
      }
      return global.mongoose;
    }

    // En producci√≥n, crear nueva conexi√≥n si no existe
    if (mongoose.connection.readyState === 0) {
      console.log('üîÑ Conectando a MongoDB Atlas (Producci√≥n)...');
      await mongoose.connect(MONGODB_URI!, connectionOptions);
      console.log('‚úÖ Conexi√≥n a MongoDB Atlas establecida (Producci√≥n)');
    }

    return mongoose;
  } catch (error) {
    console.error('‚ùå Error conectando a MongoDB Atlas:', error);
    throw new Error(`Error de conexi√≥n a la base de datos: ${error}`);
  }
}

/**
 * Funci√≥n para desconectar de MongoDB
 * √ötil para pruebas y limpieza
 */
export async function disconnectFromDatabase(): Promise<void> {
  try {
    if (mongoose.connection.readyState !== 0) {
      await mongoose.disconnect();
      console.log('üîå Desconectado de MongoDB Atlas');
    }
  } catch (error) {
    console.error('‚ùå Error desconectando de MongoDB:', error);
    throw error;
  }
}

/**
 * Funci√≥n para verificar el estado de la conexi√≥n
 * @returns boolean - true si est√° conectado, false si no
 */
export function isConnected(): boolean {
  return mongoose.connection.readyState === 1;
}

/**
 * Event listeners para la conexi√≥n de MongoDB
 * Manejo de eventos de conexi√≥n, error y desconexi√≥n
 */
mongoose.connection.on('connected', () => {
  console.log('üü¢ MongoDB Atlas: Conexi√≥n establecida');
});

mongoose.connection.on('error', (error) => {
  console.error('üî¥ MongoDB Atlas: Error de conexi√≥n:', error);
});

mongoose.connection.on('disconnected', () => {
  console.log('üü° MongoDB Atlas: Conexi√≥n perdida');
});

// Manejo graceful de cierre de la aplicaci√≥n
process.on('SIGINT', async () => {
  try {
    await disconnectFromDatabase();
    process.exit(0);
  } catch (error) {
    console.error('Error durante el cierre:', error);
    process.exit(1);
  }
});