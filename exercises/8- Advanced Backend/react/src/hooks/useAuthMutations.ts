import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useAuth } from '../context/AuthContext';
import { type RegisterData, type LoginData, type UserSettings } from '../types';
import { useAppDispatch } from '../store/hooks';
import { setCurrentPage } from '../store/uiSlice';

/**
 * Hook para manejar el registro de usuarios
 * Usa el m√©todo register del AuthContext que ya maneja el authService
 */
export function useRegisterMutation() {
    const { register } = useAuth();
    
    return useMutation({
        mutationFn: async (userData: RegisterData) => {
            console.log('üîê Registering user:', userData.email);
            await register(userData.username, userData.email, userData.password);
            return userData; // Retornamos los datos para referencia
        },
        onSuccess: (userData) => {
            console.log('‚úÖ Registration successful for:', userData.email);
        },
        onError: (error: any) => {
            console.error('‚ùå Registration failed:', error);
            throw error;
        }
    });
}

/**
 * Hook para manejar el inicio de sesi√≥n
 * Usa el m√©todo login del AuthContext que ya maneja el authService
 */
export function useLoginMutation() {
    const { login } = useAuth();
    
    return useMutation({
        mutationFn: async (loginData: LoginData) => {
            console.log('üîê Logging in user:', loginData.email);
            await login(loginData.email, loginData.password);
            return loginData; // Retornamos los datos para referencia
        },
        onSuccess: (loginData) => {
            console.log('‚úÖ Login successful for:', loginData.email);
        },
        onError: (error: any) => {
            console.error('‚ùå Login failed:', error);
            throw error;
        }
    });
}

/**
 * Hook para manejar el cierre de sesi√≥n
 * Usa el m√©todo logout del AuthContext que ya maneja el authService
 */
export function useLogoutMutation() {
    const { logout } = useAuth();
    const queryClient = useQueryClient();
    
    return useMutation({
        mutationFn: async () => {
            console.log('üö™ Logging out user...');
            await logout();
        },
        onSuccess: () => {
            console.log('‚úÖ Logout successful');
            // Limpiar todas las queries cuando el usuario se deslogea
            queryClient.clear();
        },
        onError: (error: any) => {
            console.error('‚ùå Logout failed:', error);
            // El AuthContext ya maneja la limpieza del estado local
            queryClient.clear();
        }
    });
}

/**
 * Hook para actualizar las configuraciones del usuario
 * Usa el m√©todo updateSettings del AuthContext que ya maneja el authService
 */
export function useUpdateSettingsMutation() {
    const { updateSettings } = useAuth();
    const queryClient = useQueryClient();
    const dispatch = useAppDispatch();
    
    return useMutation({
        mutationFn: async (settings: Partial<UserSettings>) => {
            console.log('‚öôÔ∏è Updating user settings:', typeof settings.uppercase_descriptions);
            await updateSettings(settings);
            return settings; // Retornar los settings para usar en onSuccess
        },
        onSuccess: (settings) => {
            console.log('‚úÖ Settings updated:', settings);
            
            // ‚úÖ Si se cambi√≥ todos_per_page, resetear a la p√°gina 1 para evitar p√°ginas vac√≠as
            if (settings.todos_per_page) {
                dispatch(setCurrentPage(1));
            }
            
            // ‚úÖ Invalidar las queries de todos para que reflejen los nuevos settings
            queryClient.invalidateQueries({ queryKey: ['todos'] });
            // El AuthContext ya actualiza el estado interno
        },
        onError: (error: any) => {
            console.error('‚ùå Settings update failed:', error);
            throw error;
        }
    });
}

/**
 * Hook para refrescar el perfil del usuario
 * Usa el m√©todo refreshProfile del AuthContext que ya maneja el authService
 */
export function useRefreshProfileMutation() {
    const { refreshProfile } = useAuth();
    
    return useMutation({
        mutationFn: async () => {
            console.log('üîÑ Refreshing user profile...');
            await refreshProfile();
        },
        onSuccess: () => {
            console.log('‚úÖ Profile refreshed successfully');
        },
        onError: (error: any) => {
            console.error('‚ùå Profile refresh failed:', error);
            throw error;
        }
    });
}
