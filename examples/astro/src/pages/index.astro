---
import Layout from "../layouts/Layout.astro";
import { getTasks } from "../services/Tareas.ts";
import { state } from "../state.ts";

const tasks: Record<string, any>[] = getTasks(state.filter);
---

<Layout>
  <head>
    <title>Gestor de tareas</title>
  </head>
  <body class="flex justify-center items-center h-screen bg-[#f5f5dc]">
    <main class="w-full max-w-[50vw] min-h-[50vh] bg-[#efd8a4] p-8 rounded-lg shadow-lg">
      <header class="text-center bg-[#e49d89dc] p-6 rounded-md">
        <h1 class="text-4xl font-bold text-black">Gestor de tareas</h1>
      </header>

      <nav class="flex justify-around bg-[#e8af9695] p-6 rounded-md mt-4">
        <div class="text-lg cursor-pointer hover:border-b-4 border-[#e08123]">Personal</div>
        <div class="text-lg cursor-pointer hover:border-b-4 border-[#e08123]">Profesional</div>
      </nav>

      <div class="flex items-center justify-between p-4 bg-white rounded-md mt-4">
        <form id="addTaskForm" method="POST" action="/api/tasks" class="flex w-full">
          <input type="text" name="task" placeholder="Qué necesitas hacer?" required class="flex-grow p-3 ml-2 border border-gray-300 rounded-md">
          <button type="submit" class="bg-[#a8c99e] text-white px-6 py-3 rounded-md hover:bg-[#88c874]">AGREGAR</button>
        </form>
      </div>

      <div class="max-w-[900px] mx-auto rounded-lg p-6 text-center mt-4">
        <ul id="checklist" class="list-none p-0">
          {tasks.map(task => (
            <li class="task-item flex justify-between bg-white p-4 rounded-md shadow-md mb-3" data-id={task.id}>
              <form method="POST" action={`/api/tasks/${task.id}`} class="inline">
                <input type="hidden" name="action" value="complete" />
                <button type="submit">{task.completed ? "✅" : "⬜️"}</button>
              </form>
              <span class={task.completed ? "line-through opacity-50 text-gray-500" : "text-gray-800"}>{task.text}</span>
              <form method="POST" action={`/api/tasks/${task.id}`} class="inline">
                <input type="hidden" name="action" value="delete" />
                <button type="submit">🗑️</button>
              </form>
            </li>
          ))}
        </ul>        
      </div>

      <form method="POST" action="/api/tasks/clear-completed" class="text-center mt-4">
        <button id="clearCompleted" class="bg-[#e49d89dc] px-6 py-3 rounded-md text-lg hover:bg-[#cc7a5a]">Limpiar</button>
      </form>

      <div class="flex justify-around mt-4">
        <div class="flex space-x-6">
          <a href="/?filter=all" data-filter="all" class="filter-btn bg-[#e8af9695] px-6 py-3 rounded-md text-lg hover:bg-[#d89e7c]">Todas</a>
          <a href="/?filter=done" data-filter="done" class="filter-btn bg-[#e8af9695] px-6 py-3 rounded-md text-lg hover:bg-[#d89e7c]">Completas</a>
          <a href="/?filter=undone" data-filter="undone" class="filter-btn bg-[#e8af9695] px-6 py-3 rounded-md text-lg hover:bg-[#d89e7c]">Incompletas</a>
        </div>
      </div>
    </main>
  </body>
</Layout>


<script>
  document.addEventListener("DOMContentLoaded", async () => {
    const checklist = document.getElementById("checklist");
    const addTaskForm = document.getElementById("addTaskForm");
    const clearCompletedBtn = document.getElementById("clearCompleted");
    const filterBtns = document.querySelectorAll(".filter-btn");
    let currentFilter = new URLSearchParams(window.location.search).get("filter") || "all";

    const renderTasks = async () => {
      const res = await fetch(`/api/tasks?filter=${currentFilter}`);
      const { tasks } = await res.json();

      checklist.innerHTML = tasks.map(task => `
        <li class="task-item flex justify-between bg-white p-4 rounded-md shadow-md mb-3" data-id="${task.id}">
          <button type="button" class="complete-btn">${task.completed ? "✅" : "⬜️"}</button>
          <span class="${task.completed ? "line-through opacity-50 text-gray-500" : "text-gray-800"}">${task.text}</span>
          <button type="button" class="delete-btn">🗑️</button>
        </li>
      `).join("");
    };

    addTaskForm?.addEventListener("submit", async (e) => {
      e.preventDefault();
      const input = addTaskForm.querySelector("input[name='task']");
      const text = input.value.trim();
      if (!text) return;

      try {
        await fetch("/api/tasks", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ task: text })
        });

        input.value = "";
        await renderTasks();
      } catch (error) {
        console.error("❌ Error al agregar tarea:", error);
      }
    });

    checklist.addEventListener("click", async (e) => {
      const target = e.target.closest("li");
      const id = target?.dataset.id;
      if (!id) return;

      if (e.target.classList.contains("complete-btn")) {
        await fetch(`/api/tasks/${id}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ action: "complete" })
        });
        await renderTasks();
      } else if (e.target.classList.contains("delete-btn")) {
        await fetch(`/api/tasks/${id}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ action: "delete" })
        });
        await renderTasks();
      }
    });

    clearCompletedBtn?.addEventListener("click", async (e) => {
      e.preventDefault();
      await fetch("/api/tasks/clear-completed", { method: "POST" });
      await renderTasks();
    });

    filterBtns.forEach(btn => {
      btn.addEventListener("click", async (e) => {
        e.preventDefault();
        currentFilter = btn.dataset.filter;
        history.pushState({}, "", `/?filter=${currentFilter}`);
        await renderTasks();
      });
    });

    await renderTasks();
  });
  </script>