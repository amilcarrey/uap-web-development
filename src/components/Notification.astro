---
export interface Props {
  message: string;
  type: 'success' | 'error' | 'info';
  show: boolean;
}

const { message, type, show } = Astro.props;

// Determinar clases según el tipo de notificación
let bgColor = '';
let textColor = '';

switch (type) {
  case 'success':
    bgColor = 'bg-green-100';
    textColor = 'text-green-800';
    break;
  case 'error':
    bgColor = 'bg-red-100';
    textColor = 'text-red-800';
    break;
  case 'info':
  default:
    bgColor = 'bg-blue-100';
    textColor = 'text-blue-800';
    break;
}
---

{show && (
  <div 
    id="notification" 
    class={`fixed top-4 right-4 px-4 py-3 rounded-lg shadow-md ${bgColor} ${textColor} transition-opacity duration-300`}
    role="alert"
    aria-live="assertive"
  >
    <div class="flex items-center">
      <span class="mr-2">
        {type === 'success' && (
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
          </svg>
        )}
        {type === 'error' && (
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
          </svg>
        )}
        {type === 'info' && (
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zm-1 7a1 1 0 100 2h.01a1 1 0 100-2H10z" clip-rule="evenodd" />
          </svg>
        )}
      </span>
      <span>{message}</span>
      <button 
        id="close-notification" 
        type="button" 
        class="ml-auto -mx-1.5 -my-1.5 rounded-lg p-1.5 inline-flex h-8 w-8 hover:bg-gray-200 focus:outline-none"
        aria-label="Cerrar"
      >
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
        </svg>
      </button>
    </div>
  </div>
)}

<script>
  // Agregar la lógica para cerrar la notificación
  document.addEventListener('DOMContentLoaded', () => {
    const notification = document.getElementById('notification');
    const closeButton = document.getElementById('close-notification');
    
    if (notification && closeButton) {
      closeButton.addEventListener('click', () => {
        notification.classList.add('opacity-0');
        setTimeout(() => {
          notification.style.display = 'none';
        }, 300);
      });
      
      // Auto-cerrar después de 5 segundos
      setTimeout(() => {
        notification.classList.add('opacity-0');
        setTimeout(() => {
          notification.style.display = 'none';
        }, 300);
      }, 5000);
    }
  });
</script>