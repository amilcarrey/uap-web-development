---
import TaskItem from '../components/TaskItem.astro';
import Layout from '../layouts/Layout.astro'; // Importa el layout que se usar√° para la p√°gina
import { getTasks } from "../services/tasks"; // Importa la lista de tareas desde el archivo tareas.ts

// Se obtiene el filtro de la URL, por defecto es "todas"
const filter = Astro.url.searchParams.get("filter") || "all";

const tasks = await getTasks(filter);
---

<Layout>
  <header>
    <!-- T√≠tulo principal con un dise√±o simple donde "TO" y "DO" est√°n separados para dar √©nfasis -->
    <h1><span>TO</span>DO</h1>
  </header>

  <!-- Barra de navegaci√≥n con botones para diferentes categor√≠as o acciones -->
  <nav>
    <!-- Bot√≥n para la categor√≠a "Personal" -->
    <button class="nav-btn">Personal</button>
    <!-- Bot√≥n para la categor√≠a "Professional" (sin clase) -->
    <button>Professional</button>
    <!-- Bot√≥n para a√±adir nuevas tareas -->
    <button class="add-btn">+</button>
  </nav>

  <!-- Filtros de tareas, para filtrar entre todas, incompletas y completadas -->
  <div class="filters">
    <form method="GET" id="filter-form">
	  <a id="filter-button" href="/" class="filter-btn {filter === 'all' ? 'active' : ''}" name="filter" data-filter-value="all">All</a>
      <a id="filter-button" href="/" class="filter-btn {filter === 'incomplete' ? 'active' : ''}" name="filter" data-filter-value="incomplete">Incomplete</a>
      <a id="filter-button" href="/" class="filter-btn {filter === 'completed' ? 'active' : ''}" name="filter" data-filter-value="completed">Completed</a>

      <!-- <button type="submit" class="filter-btn {filter === 'all' ? 'active' : ''}" name="filter" value="all">All</button>
      <button type="submit" class="filter-btn {filter === 'incomplete' ? 'active' : ''}" name="filter" value="incomplete">Incomplete</button>
      <button type="submit" class="filter-btn {filter === 'completed' ? 'active' : ''}" name="filter" value="completed">Completed</button> -->
    </form>
  </div>

  <!-- Agregar tarea -->
  <div class="task-input">
    <form method="POST" action="/api/agregar" id="add-task-form">
      <input type="text" name="text" placeholder="What do you need to do?" required autofocus>
      <button type="submit" class="add-task">ADD</button>
    </form>
  </div>

  {filter && (
  <div class="">
    {tasks.length === 0
      ? `No tasks found for "${filter}"`
      : `Showing ${tasks.length} tasks for "${filter}"`}
  </div>
  )}

  <!-- Lista de tareas -->
    <ul class="task-list">
    {tasks.map((task) => <TaskItem task={task} />)}
  </ul>

  <!-- Bot√≥n para limpiar completadas -->
  <form method="POST" action="/api/limpiar">
    <button type="submit" class="clear-completed" name="clear-completed">Clear Completed</button>
  </form>

  <template id="task-item">
    <TaskItem />
  </template>
</Layout>

<script src="../script.ts"></script>

<!-- <script type="module">

  // Agregar tarea
  const form = document.querySelector(".task-input form");
	const taskList = document.querySelector(".task-list");
  console.log(form);

  form?.addEventListener("submit", async (event) => {
    event.preventDefault(); // Previene el env√≠o por defecto

    const input = form.querySelector('input[name="task"]');
    if (!input) return; // Verifica si el input existe

    const taskText = input?.value?.trim();
    if (!taskText) return;

    try {
      const response = await fetch(`/api/agregar`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text: taskText, done: false })
      });

      if (!response.ok) throw new Error("Error al agregar tarea");

			const task = await response.json(); // Espera la respuesta del servidor

			const li = document.createElement("li");
			li.innerHTML = `
				<form method="POST" class="task-form" action="/api/completar">
					<div class="task-content">
						<label>
							<input type="hidden" name="task-id" value=${task.id} />
							<button type="submit" class="task-btn" name="task-btn">${task.done ? "‚úÖ" : "‚¨ú"}</button>
							<span>${ task.text }</span>
						</label>
					</div>
				</form>
				<form method="POST"  action="/api/eliminar/">
					<input type="hidden" name="task-id" value=${task.id} />
					<button type="submit" class="delete-btn" name="delete-btn">üóëÔ∏è</button>
				</form>
			`;

			taskList?.appendChild(li);

      input.value = ""; // Limpiamos el input

    } catch (error) {
      console.error("Error al agregar tarea:", error);
    }
  });

  // Completar tarea
  // document.querySelectorAll(".task-list form").forEach((form) => {
	// 	form.addEventListener("submit", async (event) => {
	// 		event.preventDefault(); // Previene el env√≠o por defecto

	// 		const input: HTMLInputElement | null = form.querySelector("input[name='task-id']");
	// 		const id = input?.value?.trim();

  //     try {
  //       const response = await fetch("api/completar", {
  //         method: "POST",
	// 				headers: { "Content-Type": "application/json" },
	// 				body: JSON.stringify({ id })
  //       });

  //       if (!response.ok) throw new Error("Error al completar tarea");

	// 			const button = form.querySelector(".task-btn");
	// 			if (button) {
	// 				button.textContent = button.textContent === "‚¨ú" ? "‚úÖ" : "‚¨ú";
	// 			}

  //     } catch (error) {
  //       console.error("Error al marcar tarea:", error);
  //     }
  //   });
  // });

	// SEGUNDO INTENTO
	// document.addEventListener("submit", async (event) => {
	// 	const form = event.target as HTMLFormElement;

	// 	// Verificamos si es un formulario de la lista de tareas
	// 	if (form.classList.contains("task-form")) {
	// 		event.preventDefault();

	// 		const input: HTMLInputElement | null = form.querySelector("input[name='task-id']");
	// 		const id = input?.value?.trim();

	// 		try {
	// 			const response = await fetch("api/completar", {
	// 				method: "POST",
	// 				headers: { "Content-Type": "application/json" },
	// 				body: JSON.stringify({ id })
	// 			});

	// 			if (!response.ok) throw new Error("Error al completar tarea");

	// 			const button = form.querySelector(".task-btn");
	// 			if (button) {
	// 				button.textContent = button.textContent === "‚¨ú" ? "‚úÖ" : "‚¨ú";
	// 			}
	// 		} catch (error) {
	// 			console.error("Error al marcar tarea:", error);
	// 		}
	// 	}
	// });

  // Eliminar tarea
  // document.querySelectorAll(".delete-form").forEach((form) => {
  //   form.addEventListener("submit", async (event) => {
  //     event.preventDefault(); // Previene el env√≠o por defecto

  //     const input: HTMLInputElement | null = form.querySelector("input[name='task-id']");
  //     if (!input) return; // Verifica si el input existe

  //     const id = Number(input.value?.trim());
  //     if (isNaN(id)) return;

  //     try {
  //       const response = await fetch(`/api/eliminar`, {
  //         method: "POST",
  //         headers: { "Content-Type": "application/json" },
  //         body: JSON.stringify({ id })
  //       });

  //       if (!response.ok) throw new Error("Error al eliminar tarea");

	// 			const taskElement = form.closest("li");
	// 			if (taskElement) taskElement.remove();

	// 			// Aqu√≠ podr√≠as actualizar la lista de tareas si es necesario

  //     } catch (error) {
  //       console.error("Error al eliminar tarea:", error);
  //     }
  //   });
  // });

	// SEGUNDO INTENTO
	// document.addEventListener("submit", async (event) => {
	// 	const form = event.target as HTMLFormElement;

	// 	// Verificamos si es un formulario de eliminaci√≥n
	// 	if (form.classList.contains("delete-form")) {
	// 		event.preventDefault();

	// 		const input: HTMLInputElement | null = form.querySelector("input[name='task-id']");
	// 		if (!input) return;

	// 		const id = Number(input.value?.trim());
	// 		if (isNaN(id)) return;

	// 		try {
	// 			const response = await fetch(`/api/eliminar`, {
	// 				method: "POST",
	// 				headers: { "Content-Type": "application/json" },
	// 				body: JSON.stringify({ id })
	// 			});

	// 			if (!response.ok) throw new Error("Error al eliminar tarea");

	// 			const taskElement = form.closest("li");
	// 			if (taskElement) taskElement.remove();
	// 		} catch (error) {
	// 			console.error("Error al eliminar tarea:", error);
	// 		}
	// 	}
	// });

	// Completar tarea
	document.querySelectorAll<HTMLFormElement>(".task-form").forEach((form) => {
		form.addEventListener("submit", async (event) => {
			event.preventDefault();

			const taskBtn = event.target.closest(".task-btn");

			if (taskBtn) {
				const id = taskBtn.dataset.completar;

				await fetch(`/api/completar`, {
					method: "POST",
					headers: { "Accept": "application/json" },
					body: JSON.stringify({ id })
				});
			}

			// const formData = new FormData(form);
			// const response = await fetch("/api/completar", {
			// 	method: "POST",
			// 	body: formData,
			// 	headers: {
			// 		"Accept": "application/json"
			// 	}
			// });

			// if (response.ok) {
			// 	const button = form.querySelector<HTMLButtonElement>(".task-btn");
			// 	if (button) {
			// 		button.textContent = button.textContent === "‚¨ú" ? "‚úÖ" : "‚¨ú";
			// 	}
			// } else {
			// 	alert("Error al completar la tarea");
			// }
		});
	});

	// Eliminar tarea
	


	// Clear completed tasks
	// document.querySelectorAll(".task-btn").forEach(button => {
	// 	button.addEventListener("submit", async (event) => {
	// 		event.preventDefault(); // Previene el env√≠o por defecto

	// 		const form = button.closest("form");
	// 		if (!form) return; // Verifica si el formulario existe

	// 		const input: HTMLInputElement | null = form.querySelector("input[name='task-id']");
	// 		if (!input) return; // Verifica si el input existe

	// 		const id = Number(input.value?.trim());
	// 		if (isNaN(id)) return;

	// 		try {
	// 			const response = await fetch(`/api/eliminar`, {
	// 				method: "POST",
	// 				headers: { "Content-Type": "application/json" },
	// 				body: JSON.stringify({ id }),
	// 			});

	// 			if (!response.ok) throw new Error("Error al eliminar tarea");

	// 			const taskElement = form.closest("li");
	// 			if (taskElement) taskElement.remove();
	// 		} catch (error) {
	// 			console.error("Error al eliminar tarea:", error);
	// 		}
	// 	});
	// });
</script> -->

<style is:global>
  /* Estilos generales */
	body {
		font-family: Arial, sans-serif; /* Se usa Arial o una fuente sans-serif como fallback */
		background-color: #f4ede6; /* Color de fondo del cuerpo */
		color: #555; /* Color del texto general */
		text-align: center; /* Alineaci√≥n del texto al centro */
		margin: 0; /* Se elimina el margen predeterminado */
	}

	/* T√≠tulo */
	header h1 {
		font-size: 32px; /* Tama√±o del texto del t√≠tulo */
		color: #333; /* Color del texto */
		margin: 20px 0; /* Espaciado superior e inferior */
	}

	header h1 span {
		color: #e08e36; /* Se cambia el color de una parte del texto */
	}

	/* Barra de navegaci√≥n */
	nav {
		display: flex; /* Se usa flexbox para distribuir los elementos */
		justify-content: space-between; /* Los elementos se distribuyen uniformemente en la barra */
		background-color: #fff; /* Fondo blanco */
		padding: 10px; /* Espaciado interno */
		border-bottom: 2px solid #ddd; /* Borde inferior para separar visualmente la barra */
	}

	nav button {
		border: none; /* Se elimina el borde */
		background: none; /* Se deja el fondo transparente */
		font-size: 18px; /* Tama√±o del texto */
		padding: 10px 20px; /* Espaciado interno */
		cursor: pointer; /* Se cambia el cursor a puntero al pasar sobre el bot√≥n */
	}

	nav .nav-btn {
		font-weight: bold; /* Texto en negrita */
		border-bottom: 3px solid #e08e36; /* L√≠nea inferior para destacar el bot√≥n activo */
	}

	.add-btn {
		background-color: #b07c7c; /* Color de fondo */
		color: white; /* Texto en color blanco */
		font-size: 20px; /* Tama√±o del texto */
		padding: 5px 15px; /* Espaciado interno */
		border-radius: 5px; /* Bordes redondeados */
	}

	/* Input de tareas */
	.task-input {
		margin: 20px auto; /* Espaciado superior e inferior, centrado horizontalmente */
		display: flex; /* Se usa flexbox para alinear elementos */
		justify-content: center; /* Centramos el contenido */
		align-items: center; /* Alineaci√≥n vertical */
	}

	.task-input input {
		width: 60%; /* Ocupa el 60% del ancho disponible */
		padding: 10px; /* Espaciado interno */
		border: none; /* Se elimina el borde */
		border-radius: 20px; /* Bordes redondeados */
		background-color: #eadecf; /* Color de fondo */
	}


	.add-task {
		background-color: #65b8d8; /* Color de fondo */
		color: white; /* Color del texto */
		border: none; /* Se elimina el borde */
		padding: 10px 20px; /* Espaciado interno */
		margin-left: 10px; /* Margen a la izquierda para separaci√≥n */
		border-radius: 20px; /* Bordes redondeados */
		cursor: pointer; /* Se cambia el cursor a puntero */
	}

	.add-task:hover {
		background-color: #4a9cbd; /* Color m√°s oscuro al pasar el cursor */
	}
	
	/* Formulario de cada tarea */
	.task-form {
		display: flex; /* Se usa flexbox para alinear elementos */
		justify-content: space-between; /* Los elementos se distribuyen uniformemente */
		align-items: center; /* Alineaci√≥n vertical */
		width: 100%; /* Ancho completo del contenedor */
	}

	.task-content {
		display: flex; /* Se usa flexbox para alinear elementos */
		align-items: center; /* Alineaci√≥n vertical */
		gap: 10px; /* Espacio entre el bot√≥n y el texto */
	}


	/* Lista de tareas */
	.task-list {
		list-style: none; /* Se eliminan los estilos de lista predeterminados */
		padding: 0; /* Se elimina el padding */
		margin: 0 auto; /* Centrado horizontalmente */
		width: 60%; /* Ancho de la lista */
		background-color: #e4dfd9; /* Color de fondo */
		border-radius: 10px; /* Bordes redondeados */
		padding: 20px; /* Espaciado interno */
	}

	.task-list li {
		display: flex; /* Se usa flexbox */
		align-items: center; /* Alineaci√≥n vertical */
		justify-content: space-between; /* Espaciado uniforme */
		padding: 10px; /* Espaciado interno */
		border-bottom: 1px solid #ccc; /* L√≠nea divisoria entre tareas */
	}

	.task-btn {
		background: none; /* Sin fondo */
		border: none; /* Sin borde */
		font-size: 18px; /* Tama√±o del texto */
		cursor: pointer; /* Se cambia el cursor a puntero */
	}

	.delete-btn {
		background: none; /* Sin fondo */
		border: none; /* Sin borde */
		font-size: 18px; /* Tama√±o del texto */
		cursor: pointer; /* Se cambia el cursor a puntero */
	}

	/* Asegurar que la barra de navegaci√≥n y filtros est√°n separados */
	.filters {
		display: flex; /* Se usa flexbox */
		justify-content: center; /* Centrado horizontal */
		gap: 10px; /* Espaciado entre los botones */
		margin-top: 10px; /* Espaciado superior */
		padding: 10px; /* Espaciado interno */
	}

	.filter-btn {
		padding: 10px 15px; /* Espaciado interno */
		border: none; /* Sin borde */
		border-radius: 5px; /* Bordes redondeados */
		cursor: pointer; /* Se cambia el cursor a puntero */
		background-color: #b07c7c; /* Color de fondo */
		color: white;
		font-size: 16px;
	}

	.filter-btn:hover {
		background-color: #916666; /* Color m√°s oscuro al pasar el cursor */
	}


	.clear-completed {
		display: block; /* Se muestra como un bloque */
		margin: 20px auto; /* Centrado horizontalmente */
		padding: 10px 15px; /* Espaciado interno */
		background-color: #d9534f; /* Color de fondo */
		color: white; /* Color del texto */
		border: none; /* Sin borde */
		border-radius: 5px; /* Bordes redondeados */
		cursor: pointer; /* Se cambia el cursor a puntero */
	}

	.clear-completed:hover {
		background-color: #c9302c; /* Color m√°s oscuro al pasar el cursor */
	}
</style>
