---
import { state } from '../state';

let board = state.board.map(row => [...row]);
let currentPlayer = state.currentPlayer;
let winner = state.winner;
let gameOver = state.gameOver;

let statusMessage: string;
if (gameOver) {
  statusMessage = winner === "tie" ? "Empate" : `Gana el jugador ${winner}`;
} else {
  statusMessage = `Turno del jugador: ${currentPlayer}`;
}
---
<head>
  <link rel="stylesheet" href="/styles/board.css">
</head>
<h1>Ta Te Ti</h1>
<p id="status">{statusMessage}</p>

<form method="POST" action="/api/move" id="move-form">
  <div class="board" id="board">
    {
      board.map((row, rowIndex) => (
        <div class="row">
          {
            row.map((cell, colIndex) => {
              const disabled = cell !== "" || gameOver;
              return (
                <button
                  type="submit"
                  name="move"
                  value={`${rowIndex},${colIndex}`}
                  class="cell"
                  disabled={disabled}
                >
                  {cell}
                </button>
              );
            })
          }
        </div>
      ))
    }
  </div>
</form>


{gameOver && (
  <form method="POST" action="/api/reset" id="reset-form">
    <button type="submit" class="reset">Reiniciar</button>
  </form>
)}

<noscript>
  <p style="color: red;">JavaScript está deshabilitado. La experiencia puede ser limitada.</p>
</noscript>

<script type="module">
  const moveForm = document.getElementById('move-form');
  const resetForm = document.getElementById('reset-form');
  const boardDiv = document.getElementById('board');

  async function actualizarVista() {
    const res = await fetch('/api/board');
    const data = await res.json();

    // Actualiza el HTML del tablero
    boardDiv.innerHTML = data.boardHtml;
    document.getElementById('status').textContent = data.status;

    // Si el juego terminó, agregamos el botón de reinicio
    if (data.status.includes('Gana') || data.status.includes('Empate')) {
      const resetForm = document.createElement('form');
      resetForm.method = 'POST';
      resetForm.action = '/api/reset';
      resetForm.id = 'reset-form';

      const resetBtn = document.createElement('button');
      resetBtn.type = 'submit';
      resetBtn.className = 'reset';
      resetBtn.textContent = 'Reiniciar';

      resetForm.appendChild(resetBtn);
      document.body.appendChild(resetForm);

      // Agregar el event listener para el nuevo form
      resetForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        await fetch('/api/reset', { method: 'POST' });
        await actualizarVista();
        resetForm.remove(); // limpiar el form al resetear
      });
    }
  }

  if (moveForm) {
    moveForm.addEventListener('click', async (e) => {
      const target = e.target;
      if (target.tagName === 'BUTTON' && target.name === 'move') {
        e.preventDefault();

        const formData = new FormData();
        formData.set('move', target.value);

        await fetch('/api/move', {
          method: 'POST',
          body: formData,
        });

        await actualizarVista();
      }
    });
  }

  // Si ya había un botón de reset visible al cargar
  if (resetForm) {
    resetForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      await fetch('/api/reset', { method: 'POST' });
      await actualizarVista();
      resetForm.remove();
    });
  }
</script>



<style>
  body {
    font-family: sans-serif;
    text-align: center;
    background: #f2f2f2;
    padding: 2rem;
  }

  .board {
    display: inline-block;
    margin-top: 1rem;
  }

  .row {
    display: flex;
  }

  .cell {
    width: 80px;
    height: 80px;
    font-size: 2rem;
    margin: 5px;
    cursor: pointer;
  }

  .reset {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    font-size: 1rem;
  }
</style>
