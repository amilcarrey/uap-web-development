üìã TaskManager - Sistema de Gesti√≥n de Tareas
üéØ Descripci√≥n del Proyecto
TaskManager es una aplicaci√≥n web completa para la gesti√≥n de tareas con sistema de usuarios, categor√≠as compartidas y configuraciones personalizables. El sistema permite crear tableros colaborativos donde m√∫ltiples usuarios pueden trabajar juntos en sus tareas.

üèóÔ∏è Arquitectura del Sistema
Frontend (React + TypeScript)
Framework: React 19 con TypeScript
Routing: TanStack Router
Estado Global: Zustand con persistencia
Fetching: TanStack Query (React Query)
Estilos: Tailwind CSS + Font Awesome
Build Tool: Vite
Backend (Node.js + Express)
Framework: Express.js con TypeScript
Base de Datos: SQLite3
Autenticaci√≥n: JWT con cookies httpOnly
Encriptaci√≥n: Argon2 para passwords
Middleware: CORS, Cookie Parser

üöÄ Configuraci√≥n e Instalaci√≥n
Prerrequisitos
Node.js 18+
npm o yarn
Git
1. Clonar el Repositorio
2. Configurar Backend
3. Configurar Frontend
4. Acceder a la Aplicaci√≥n
Frontend: http://localhost:5173
Backend API: http://localhost:4000

üîó Documentaci√≥n de la API:

üîê Autenticaci√≥n
POST /api/auth/register
Registrar nuevo usuario
    // Request
    POST http://localhost:4000/api/auth/register
    Content-Type: application/json

    {
    "email": "usuario@email.com",
    "password": "password123",
    "role": "user"
    }

    // Response 201 - √âxito
    {
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "email": "usuario@email.com",
    "role": "user"
    }

    // Response 400 - Error
    {
    "error": "Usuario ya existe"
    }

POST /api/auth/login
Iniciar sesi√≥n
    // Request
    POST http://localhost:4000/api/auth/login
    Content-Type: application/json

    {
    "email": "usuario@email.com",
    "password": "password123"
    }

    // Response 200 - √âxito
    {
    "message": "Inicio de sesi√≥n exitoso"
    }
    // + Cookie: token=eyJhbGciOiJIUzI1NiIs... (httpOnly)

    // Response 401 - Error
    {
    "error": "Contrase√±a incorrecta"
    }

POST /api/auth/logout
Cerrar sesi√≥n
    // Request
    POST http://localhost:4000/api/auth/logout
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    // Response 200
    {
    "message": "Logout exitoso"
    }

GET /api/auth/me
Obtener usuario actual (requiere autenticaci√≥n)
    // Request (requiere cookie de autenticaci√≥n)
    GET http://localhost:4000/api/auth/me
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    // Response 200 - √âxito
    {
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "email": "usuario@email.com",
    "role": "user"
    }

üìÅ Gesti√≥n de Categor√≠as/Tableros
GET /api/categorias
Obtener categor√≠as del usuario
// Request
    GET http://localhost:4000/api/categorias
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    // Response 200
    [
    {
        "id": "trabajo",
        "name": "Trabajo",
        "userId": "550e8400-e29b-41d4-a716-446655440000",
        "userRole": "owner",
        "isShared": false
    },
    {
        "id": "personal",
        "name": "Personal",
        "userId": null,
        "userRole": "editor",
        "isShared": true
    }
    ]

POST /api/categorias
Crear nueva categor√≠a
  // Request
    POST http://localhost:4000/api/categorias
    Content-Type: application/json
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    {
    "id": "mi-proyecto",
    "name": "Mi Proyecto"
    }

    // Response 201
    {
    "message": "Categor√≠a agregada exitosamente"
    }

    // Response 400 - Error
    {
    "error": "La categor√≠a ya existe"
    }  

DELETE /api/categorias/:id
Eliminar categor√≠a (solo owners)
    // Request
    DELETE http://localhost:4000/api/categorias/trabajo
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    // Response 200
    {
    "message": "Categor√≠a eliminada exitosamente"
    }

    // Response 403 - Sin permisos
    {
    "error": "Solo el propietario puede eliminar esta categor√≠a."
    }


POST /api/categorias/:id/share
Compartir categor√≠a con otro usuario
    // Request
    POST http://localhost:4000/api/categorias/trabajo/share
    Content-Type: application/json
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    {
    "userEmail": "colaborador@email.com",
    "role": "editor"
    }

    // Response 200
    {
    "message": "Categor√≠a compartida exitosamente"
    }

    // Response 400 - Error
    {
    "error": "Usuario no encontrado con ese email."
    }

GET /api/categorias/:id/permissions
Ver permisos de una categor√≠a
    // Request
    GET http://localhost:4000/api/categorias/trabajo/permissions
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    // Response 200
    [
    {
        "userId": "550e8400-e29b-41d4-a716-446655440000",
        "email": "owner@email.com",
        "role": "owner"
    },
    {
        "userId": "660e8400-e29b-41d4-a716-446655440001",
        "email": "colaborador@email.com", 
        "role": "editor"
    }
    ]

‚úÖ Gesti√≥n de Tareas
GET /api/tasks
Obtener tareas con paginaci√≥n
    // Request con par√°metros
    GET http://localhost:4000/api/tasks?filtro=pendientes&categoriaId=trabajo&page=1&pageSize=7&search=comprar
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    // Response 200
    {
    "tasks": [
        {
        "id": 1,
        "text": "Comprar leche para el caf√©",
        "completed": false,
        "categoriaId": "trabajo"
        },
        {
        "id": 2,
        "text": "Revisar documentaci√≥n del proyecto",
        "completed": false,
        "categoriaId": "trabajo"
        }
    ],
    "totalPages": 3,
    "totalCount": 15
    }

POST /api/tasks
    Crear nueva tarea
    // Request
    POST http://localhost:4000/api/tasks
    Content-Type: application/json
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    {
    "text": "Completar documentaci√≥n de la API",
    "categoriaId": "trabajo"
    }

    // Response 201
    {
    "message": "Tarea agregada exitosamente"
    }

    // Response 403 - Sin permisos
    {
    "error": "No tienes permisos para agregar tareas en esta categor√≠a."
    }

PUT /api/tasks/:id
Editar tarea
    // Request
    PUT http://localhost:4000/api/tasks/1
    Content-Type: application/json
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    {
    "text": "Completar documentaci√≥n de la API (URGENTE)",
    "categoriaId": "trabajo"
    }

    // Response 200
    {
    "message": "Tarea editada exitosamente"
    }

PATCH /api/tasks/:id/toggle
    Cambiar estado de tarea (completada/pendiente).
    // Request
    PATCH http://localhost:4000/api/tasks/1/toggle
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    // Response 200
    {
    "message": "Estado de tarea actualizado"
    }

DELETE /api/tasks/:id
Eliminar tarea espec√≠fica
    // Request
    DELETE http://localhost:4000/api/tasks/1
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    // Response 200
    {
    "message": "Tarea eliminada exitosamente"
    }

    // Response 404 - No encontrada
    {
    "error": "Tarea no encontrada"
    }

DELETE /api/tasks/completed
Eliminar todas las tareas completadas de una categor√≠a
    // Request
    DELETE http://localhost:4000/api/tasks/completed?categoriaId=trabajo
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    // Response 200
    {
    "message": "Tareas completas eliminadas"
    }

‚öôÔ∏è Configuraciones de Usuario
GET /api/userSettings
    Obtener configuraciones del usuario
    // Request
    GET http://localhost:4000/api/userSettings
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    // Response 200
    {
    "uppercaseDescriptions": "false",
    "refetchInterval": "30",
    "tasksPerPage": "7"
    }

PUT /api/userSettings
Actualizar configuraciones m√∫ltiple
// Request - Actualizar m√∫ltiples configuraciones
PUT http://localhost:4000/api/userSettings
Content-Type: application/json
Cookie: token=eyJhbGciOiJIUzI1NiIs...

{
  "uppercaseDescriptions": "true",
  "refetchInterval": "60",
  "tasksPerPage": "15"
}

// Response 200
{
  "message": "Configuraciones actualizadas exitosamente"
}

PUT /api/userSettings Individual
// Request - Actualizar una configuraci√≥n
PUT http://localhost:4000/api/userSettings
Content-Type: application/json
Cookie: token=eyJhbGciOiJIUzI1NiIs...

{
  "settingKey": "tasksPerPage",
  "settingValue": "10"
}

// Response 200
{
  "message": "Configuraci√≥n actualizada exitosamente"
}

POST /api/userSettings
Crear nueva configuraci√≥n
    // Request
    POST http://localhost:4000/api/userSettings
    Content-Type: application/json
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    {
    "settingKey": "nuevaConfiguracion",
    "settingValue": "valor"
    }

    // Response 201
    {
    "message": "Configuraci√≥n agregada exitosamente"
    }

DELETE /api/userSettings/:settingKey
Eliminar configuraci√≥n espec√≠fica
    // Request
    DELETE http://localhost:4000/api/userSettings/uppercaseDescriptions
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    // Response 200
    {
    "message": "Configuraci√≥n eliminada exitosamente"
    }

DELETE /api/userSettings/all
Resetear todas las configuraciones a valores por defecto
    // Request
    DELETE http://localhost:4000/api/userSettings/all
    Cookie: token=eyJhbGciOiJIUzI1NiIs...

    // Response 200
    {
    "message": "Configuraciones restablecidas a valores por defecto"
    }


üé® Caracter√≠sticas del Frontend:

üîê Sistema de Autenticaci√≥n
Login/Register con validaciones
Rutas protegidas autom√°ticas
Redirecci√≥n autom√°tica si no est√° autenticado
Manejo de errores centralizado

üìã Gesti√≥n de Tareas
CRUD completo: Crear, leer, actualizar y eliminar tareas
Paginaci√≥n inteligente: Configurable por usuario
Filtros avanzados: Por estado (pendientes/completadas)
B√∫squeda en tiempo real: Buscar por texto
Auto-refresh: Actualizaci√≥n autom√°tica configurable

üë• Sistema Colaborativo
Tableros compartidos: M√∫ltiples usuarios por categor√≠a
Roles granulares: Owner, Editor, Viewer
Permisos visuales: Indicadores de rol y acceso
Compartir f√°cil: Por email del usuario

‚öôÔ∏è Configuraciones Personalizables
Tareas por p√°gina: 5, 7, 10, 15, 20
Auto-refresh: 5-300 segundos
Formato de texto: Normal o MAY√öSCULAS
Persistencia: LocalStorage + Backend

üéØ UX/UI Profesional
Responsive design: Funciona en m√≥vil y desktop
Loading states: Indicadores de carga
Error handling: Mensajes descriptivos
Iconograf√≠a consistente: Font Awesome
Feedback visual: Notificaciones toast

üóÉÔ∏è Estructura de Base de Datos
Tabla: users
CREATE TABLE users (
  id TEXT PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL,
  role TEXT DEFAULT 'user'
);
Tabla: categories
CREATE TABLE categories (
  id TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  userId TEXT NOT NULL,
  FOREIGN KEY (userId) REFERENCES users (id)
);
Tabla: category_permissions
CREATE TABLE category_permissions (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  categoryId TEXT NOT NULL,
  userId TEXT NOT NULL,
  role TEXT NOT NULL,
  FOREIGN KEY (categoryId) REFERENCES categories (id),
  FOREIGN KEY (userId) REFERENCES users (id)
);
Tabla: tasks
CREATE TABLE tasks (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  text TEXT NOT NULL,
  completed BOOLEAN DEFAULT FALSE,
  categoriaId TEXT NOT NULL,
  userId TEXT NOT NULL,
  FOREIGN KEY (categoriaId) REFERENCES categories (id),
  FOREIGN KEY (userId) REFERENCES users (id)
);
Tabla: user_settings
CREATE TABLE user_settings (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  userId TEXT NOT NULL,
  settingKey TEXT NOT NULL,
  settingValue TEXT NOT NULL,
  FOREIGN KEY (userId) REFERENCES users (id),
  UNIQUE(userId, settingKey)
);

üîí Seguridad Implementada:
Autenticaci√≥n & Autorizaci√≥n:
    JWT Tokens: Almacenados en cookies httpOnly
    Password Hashing: Argon2 (m√°s seguro que bcrypt)
    Role-based Access: Admin/User con permisos granulares
    Route Protection: Middleware de autenticaci√≥n en todas las rutas protegidas
Validaciones:
    Input Sanitization: Validaci√≥n en frontend y backend
    SQL Injection Prevention: Uso de prepared statements
    XSS Protection: httpOnly cookies y sanitizaci√≥n
    CORS Configuration: Or√≠genes espec√≠ficos permitidos

üõ†Ô∏è Tecnolog√≠as Utilizadas
Frontend Stack
    {
        "react": "^19.1.0",
        "@tanstack/react-query": "^5.76.2",
        "@tanstack/react-router": "^1.0.0",
        "zustand": "^5.0.5",
        "tailwindcss": "^4.1.6",
        "@fortawesome/fontawesome-free": "^6.7.2",
        "typescript": "^5.6.3",
        "vite": "^6.0.5"
    }
Backend Stack
    {
    "express": "^5.1.0",
    "sqlite3": "^5.1.7",
    "jsonwebtoken": "^9.0.2",
    "argon2": "^0.43.0",
    "cors": "^2.8.5",
    "cookie-parser": "^1.4.7",
    "typescript": "^5.7.3",
    "ts-node": "^10.9.2"
    }
üìù Scripts Disponibles
    Backend
        # Desarrollo con hot reload
        npm run dev

        # Compilar TypeScript
        npm run build

        # Ejecutar en producci√≥n
        npm start

        # Instalar dependencias
        npm install
    Frontend
        # Servidor de desarrollo con hot reload
        npm run dev

        # Build para producci√≥n
        npm run build

        # Preview del build de producci√≥n
        npm run preview

        # Linting del c√≥digo
        npm run lint

        # Instalar dependencias
        npm install


üë®‚Äçüíª Desarrollado por:
Este sistema fue desarrollado como proyecto educativo, implementando las mejores pr√°cticas de desarrollo full-stack con tecnolog√≠as modernas.

Stack: React + TypeScript + Express + SQLite
Patr√≥n: MVC con separaci√≥n de responsabilidades
Arquitectura: REST API con autenticaci√≥n JWT
Metodolog√≠a: Desarrollo incremental con testing manual

üìà M√©tricas del Proyecto:
L√≠neas de c√≥digo: ~2,500 l√≠neas
Endpoints: 20+ rutas API
Componentes React: 15+ componentes
Hooks customizados: 10+ hooks
Tablas de BD: 5 tablas relacionales
Tiempo de desarrollo: 3 semanas