---
import { type Task } from "../types";
import bin from "../assets/tacho.png";

type Props = {
    content: string;
    id: string;
    checked: boolean;
};

const { id, content, checked }: Props = Astro.props;
---

<task-element class="flex justify-center items-center p-2 border-b border-[#b1e4e4] bg-[#faebd7] mx-auto w-3/5 p-3">
    <li data-id={id} class="flex items-center gap-3 w-110">
        <form method="POST" action={`/api/tasks/${id}`} class="flex-shrink-0">
            <button
                class="w-12 h-6 border rounded flex items-center justify-center items-center"
                type="submit"
                name="action"
                value="check"
                data-action-button="check-button"
                data-checked={checked}
                >check</button
            >
        </form>
        <p class="flex-grow">{content}</p>
        <form method="post" action={`/api/tasks/${id}`} class="flex-shrink-0">
            <button
                type="submit"
                name="action"
                value="delete"
                data-action-button="delete-button"
                class="text-gray-500 hover:text-red-500 transition-colors"
            >
                <img src={bin.src} class="h-4"/>
            </button>
        </form>
    </li>
</task-element>


<script>
    import type { Task } from "../types";

    export class TaskElement extends HTMLElement {
        private li: HTMLLIElement | null = null;
        private contentElement: HTMLElement | null = null;
        private checkButton: HTMLButtonElement | null = null;
        private deleteButton: HTMLButtonElement | null = null;
        private taskId: string | undefined;

        connectedCallback() {
            this.li = this.querySelector("li")!;
            this.contentElement = this.querySelector<HTMLElement>(
                "[data-content = 'content']",
            )!;
            this.checkButton = this.querySelector<HTMLButtonElement>(
                "[data-action-button = 'check-button']",
            )!;
            this.deleteButton = this.querySelector<HTMLButtonElement>(
                "[data-action-button = 'delete-button']",
            )!;

            this.taskId = this.li.dataset.id;
            this.checkButton.addEventListener("click", this.handleChecks);
            this.deleteButton.addEventListener("click", this.handleDelete);
        }

        setId(id: string) {
            if (!this.li) throw new Error();
            this.li.dataset["id"] = id;
            this.taskId = id;
        }

        setChecked(checked: boolean) {
            if (!this.checkButton) throw new Error();
            this.checkButton.textContent = checked
                ? "Completado :)"
                : "Completar";
        }

        setContent(content: string) {
            if (!this.contentElement) throw new Error();
            this.contentElement.textContent = content;
        }

        handleChecks = async (e: MouseEvent) => {
            e.preventDefault();

            const id = this.taskId;

            const response = await fetch(`/api/tasks/${id}`, {
                method: "POST",
                body: JSON.stringify({ action: "check" }),
                headers: {
                    "Content-Type": "application/json",
                },
            });

            const data: { succes: boolean; task: Task } = await response.json();
            if (data.succes) {
                this.setChecked(data.task.checked);
            }
        };

        handleDelete = async (e: MouseEvent) => {
            e.preventDefault();

            const id = this.taskId

            const response = await fetch(`/api/tasks/${id}`, {
                method: "POST",
                body: JSON.stringify({ action: "delete" }),
                headers: {
                    "Content-Type": "application/json",
                },
            });

            const data: { succes: boolean; task: Task } = await response.json();
            if (data.succes) {
                this.remove();
            }
        };
    }

    customElements.define("task-element", TaskElement);
</script>
